 2109  sudo apt-get update
 2110  sudo apt-get install ca-certificates curl
 2111  sudo install -m 0755 -d /etc/apt/keyrings
 2112  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
 2113  sudo chmod a+r /etc/apt/keyrings/docker.asc
 2114  echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

 2130  sudo service --status-all
 2131  sudo service docker start
 2132  sudo service --status-all

 2136  sudo systemctl enable docker.service
 2137  sudo systemctl enable containerd.service

 2140  sudo vi /etc/docker/daemon.json

 2142  sudo service --status-all
 2143  sudo service docker stop
 2144  sudo service docker start

 2166  vi ~/.docker/config.json

 2168  docker pull ubuntu:20.04

 2187  docker buildx --debug build . -t aviary-dev

xxxx   docker images
xxxx   docker tag cc1f0bb87472 aviary-dev

 2196  docker run -it aviary-dev



 docker run --name avdev -it swryan/aviary-dev:0.9.3-dev
 {do some stuff and exit}
 docker start -ai avdev
 {connect to same container, changes persist}

# to open another shell in a running container
docker exec -it avdev /bin/bash


# Using Docker for Desktop

# Docker for Desktop is a full version of Docker that runs on your local machine.
# It is a client-server application that includes the Docker CLI and the Docker Engine.
# The Docker CLI is used to interact with the Docker Engine.
# The Docker Engine is used to build, run, and manage Docker containers.
# Docker for Desktop is available for Windows and Mac.
# https://docs.docker.com/docker-for-windows/install/
# https://docs.docker.com/docker-for-mac/install/

> select "Docker Hub" on the left panel
> search for "swryan"
> select "swryan/aviary-dev"
> click "Pull"
> select "Images" on the left panel
## click the Run icon on the right side of the "swryan/aviary-dev" row
## expand "Optional Settings"
## Enter a name for your container, e.g. "avdev"
## click "Run"
## Docker Desktop will start the container and open the "Logs" panel
> select the "Exec" tab to open a terminal in the container
> type "bash" to get a bash prompt, after which you will have access to the conda environment



# run image, map current directory to the work dir in the container
# (make sure the current directory is writable by docker)
# when working the 'work' directory in the container output files, etc will be accessible on the host
 chmod 777 .
 docker run --name omdev -v ./work:/home/omdao/work:rw -it openmdao-dev &
 docker exec -it omdev /bin/bash

# set DISPLAY for GUI apps (google-chrome has been installed as a browser for 'openmdao n2', etc.)
(mdaowork) omdao@dbf0cc234e32:~/work$ export DISPLAY=172.21.192.1:0.0
(mdaowork) omdao@dbf0cc234e32:~/work$ google-chrome &

# build for ARM64
sudo apt-get install qemu binfmt-support qemu-user-static # Install the qemu packages
docker run --rm --privileged multiarch/qemu-user-static --reset -p yes # This step will execute the registering scripts
docker run --platform=linux/arm64/v8 --rm -t arm64v8/ubuntu uname -m # Testing the emulation environment
docker buildx --debug build . -t swryan/aviary-openvsp-dev-arm64 --platform linux/arm64


# podman can be installed on OSX via brew (without needing root privileges)
brew install podman
podman machine init
podman machine start

# SHELL is not supported for OCI image format, [/bin/bash -c] will be ignored. Must use docker format
# https://github.com/containers/podman/issues/8477
podman buildx build --format docker . -t openmdao-dev
podman push 961549a77c61 docker://docker.io/swryan/openmdao-dev

# podman relies on /etc/subuid and /etc/subgid
podman  buildx build --storage-opt  ignore_chown_errors=true   --format docker . -t npss_v32
# after subuid and subgids are set up, the following command is needed:
podman system migrate
# then you don't need --storage-opt flag or ignore_chown_errors
podman buildx build --format docker . -t npss_v32
podman buildx build --format docker . -f Dockerfile.client -t om-philote

# work in progress...tried running client and server in a pod (not successful yet)
podman pod create --name npss_pod
podman run --name npss -v `pwd`:/home/omdao/work:rw localhost/npss_v32:latest &
podman run --name om-client -v `pwd`:/home/omdao/work:rw  localhost/om-philote:latest &
podman exec -it om-client /bin/bash

# after running server on hpc, can access via ssh tunnel on desktop:
ssh -NfL localhost:50051:localhost:50051 user@hpc
python client.py

conda install -c conda-forge qemu-system-x86_64
podman machine init podman-machine-default

$ docker login ghcr.io
Username: swryan
Password:
Login Succeeded
$ docker push ghcr.io/swryan/docker-images:aviary-arm64

apptainer pull openmdao-337.sif docker://ghcr.io/openmdao/openmdao:3.3.7
apptainer run openmdao-337.sif

# allocate more memory and cpus to the podman machine
podman machine stop
podman machine set --cpus 2 --memory 2048
podman machine start


#
# build VTK
#
sudo apt install \
    build-essential \
    cmake \
    cmake-curses-gui \
    mesa-common-dev \
    mesa-utils \
    freeglut3-dev \
    ninja-build

wget https://www.vtk.org/files/release/9.4/VTK-9.4.1.tar.gz
tar -xvf VTK-9.4.1.tar.gz
mkdir vtk
mv VTK-9.4.1 vtk/source

cd vtk
mkdir build
cd build
ccmake -GNinja ../source
ccmake ../source  (just do 'cmake --build')
make
sudo 1make install
